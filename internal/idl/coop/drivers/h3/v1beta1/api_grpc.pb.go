// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GeospatialIndexServiceClient is the client API for GeospatialIndexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeospatialIndexServiceClient interface {
	// Indexes the location at the specified resolution, returning the index of
	// the cell containing the location. This buckets the geographic point into
	// the H3 grid. See the algorithm description for more information:
	// https://h3geo.org/docs/core-library/geoToH3desc
	//
	// https://h3geo.org/docs/api/indexing/#geotoh3
	GeoToH3(ctx context.Context, in *GeoToH3Request, opts ...grpc.CallOption) (*GeoToH3Response, error)
	// k-rings produces indices within k distance of the origin index.
	// k-ring 0 is defined as the origin index, k-ring 1 is defined as k-ring 0
	// and all neighboring indices, and so on.
	//
	// Output is placed in the provided array in no particular order. Elements
	// of the output array may be left zero, as can happen when crossing a
	// pentagon.
	//
	// https://h3geo.org/docs/api/traversal/#kring
	KRing(ctx context.Context, in *KRingRequest, opts ...grpc.CallOption) (*KRingResponse, error)
}

type geospatialIndexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeospatialIndexServiceClient(cc grpc.ClientConnInterface) GeospatialIndexServiceClient {
	return &geospatialIndexServiceClient{cc}
}

func (c *geospatialIndexServiceClient) GeoToH3(ctx context.Context, in *GeoToH3Request, opts ...grpc.CallOption) (*GeoToH3Response, error) {
	out := new(GeoToH3Response)
	err := c.cc.Invoke(ctx, "/coop.drivers.h3.v1beta1.GeospatialIndexService/GeoToH3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geospatialIndexServiceClient) KRing(ctx context.Context, in *KRingRequest, opts ...grpc.CallOption) (*KRingResponse, error) {
	out := new(KRingResponse)
	err := c.cc.Invoke(ctx, "/coop.drivers.h3.v1beta1.GeospatialIndexService/KRing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeospatialIndexServiceServer is the server API for GeospatialIndexService service.
// All implementations should embed UnimplementedGeospatialIndexServiceServer
// for forward compatibility
type GeospatialIndexServiceServer interface {
	// Indexes the location at the specified resolution, returning the index of
	// the cell containing the location. This buckets the geographic point into
	// the H3 grid. See the algorithm description for more information:
	// https://h3geo.org/docs/core-library/geoToH3desc
	//
	// https://h3geo.org/docs/api/indexing/#geotoh3
	GeoToH3(context.Context, *GeoToH3Request) (*GeoToH3Response, error)
	// k-rings produces indices within k distance of the origin index.
	// k-ring 0 is defined as the origin index, k-ring 1 is defined as k-ring 0
	// and all neighboring indices, and so on.
	//
	// Output is placed in the provided array in no particular order. Elements
	// of the output array may be left zero, as can happen when crossing a
	// pentagon.
	//
	// https://h3geo.org/docs/api/traversal/#kring
	KRing(context.Context, *KRingRequest) (*KRingResponse, error)
}

// UnimplementedGeospatialIndexServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGeospatialIndexServiceServer struct {
}

func (UnimplementedGeospatialIndexServiceServer) GeoToH3(context.Context, *GeoToH3Request) (*GeoToH3Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeoToH3 not implemented")
}
func (UnimplementedGeospatialIndexServiceServer) KRing(context.Context, *KRingRequest) (*KRingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KRing not implemented")
}

// UnsafeGeospatialIndexServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeospatialIndexServiceServer will
// result in compilation errors.
type UnsafeGeospatialIndexServiceServer interface {
	mustEmbedUnimplementedGeospatialIndexServiceServer()
}

func RegisterGeospatialIndexServiceServer(s grpc.ServiceRegistrar, srv GeospatialIndexServiceServer) {
	s.RegisterService(&GeospatialIndexService_ServiceDesc, srv)
}

func _GeospatialIndexService_GeoToH3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeoToH3Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeospatialIndexServiceServer).GeoToH3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coop.drivers.h3.v1beta1.GeospatialIndexService/GeoToH3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeospatialIndexServiceServer).GeoToH3(ctx, req.(*GeoToH3Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeospatialIndexService_KRing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KRingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeospatialIndexServiceServer).KRing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/coop.drivers.h3.v1beta1.GeospatialIndexService/KRing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeospatialIndexServiceServer).KRing(ctx, req.(*KRingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeospatialIndexService_ServiceDesc is the grpc.ServiceDesc for GeospatialIndexService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeospatialIndexService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coop.drivers.h3.v1beta1.GeospatialIndexService",
	HandlerType: (*GeospatialIndexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GeoToH3",
			Handler:    _GeospatialIndexService_GeoToH3_Handler,
		},
		{
			MethodName: "KRing",
			Handler:    _GeospatialIndexService_KRing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coop/drivers/h3/v1beta1/api.proto",
}
